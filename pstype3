#!/usr/bin/python3
#+
# This script allows the use of a Hershey font as a PostScript Type 3
# (user-defined) font. Invoke it as follows:
#
#     pstype3 --linewidth=linewidth [--suffix=suffix] fontname [fontname ...]
#
# where the arguments are the names of the fonts to convert. The PostScript
# representation of each font is written to standard output. The font is
# created as a composite font with 8/8 encoding. This means that each character
# to be displayed has to be encoded as 2 bytes in a “show” string. Unfortunately
# PostScript doesn’t support UTF-8 encoding.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import getopt
from qahirah import \
    Matrix, \
    Vector
import hershey_font

def code_name(c) :
    return \
        "g{:05d}".format(c)
#end code_name

do_font_caching = True
linewidth = None
align_left = True
use_encoding = True
suffix = ""
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["linewidth=", "no-align-left", "no-caching", "no-use-encoding", "suffix="],
  )
for keyword, value in opts :
    if keyword == "--linewidth" :
        linewidth = float(value)
        assert linewidth > 0
    elif keyword == "--no-align-left" :
        align_left = False
    elif keyword == "--no-caching" :
        do_font_caching = False
    elif keyword == "--no-use-encoding" :
        use_encoding = False
    elif keyword == "--suffix" :
        suffix = value
    #end if
#end for
if linewidth == None :
    raise getopt.GetoptError("forgot to specify --linewidth")
#end if
if len(args) == 0 :
    raise getopt.GetoptError("usage: {} fontname [fontname ...]".format(sys.argv[0]))
#end if

pr = sys.stdout.write

def gen_bbox_str(font) :
    return \
        "[{} {} {} {}]".format(font.min.x, font.min.y - font.baseline_y, font.max.x, font.max.y - font.baseline_y)
#end gen_bbox_str

def gen_font(font, name, block_codes, encoding) :
    m = \
        (
            Matrix.scale(factor = 1 / max(font.max.x - font.min.x, font.max.y - font.min.y))
        *
            Matrix.scale(factor = Vector(1, -1), centre = (font.max + font.min) / 2)
        )
    matrix_str = \
        "[{xx} {yx} {xy} {yy} {x0} {y0}]".format \
          (
            xx = m.xx,
            xy = m.xy,
            yx = m.yx,
            yy = m.yy,
            x0 = m.x0,
            y0 = m.y0,
          )
    pr("/{}\n".format(name))
    pr("<<\n")
    pr("    /FontType 3\n")
    pr("    /LanguageLevel 2\n") # using BuildGlyph rather than BuildChar
    pr("    /FontMatrix {}\n".format(matrix_str))
    pr("    /Encoding [")
    first = True
    for c in range(256) :
        if first :
            first = False
        else :
            pr(" ")
        #end if
        if c in block_codes :
            pr("/" + code_name(block_codes[c]))
        else :
            pr("/.notdef")
        #end if
    #end for
    pr("]\n")
    pr("    /CharStrings\n")
    pr("    <<\n")
    pr \
      (
        "        /.notdef << /min_x {min_x} /max_x {max_x} /path"
        " {{newpath {min_x} {min_y} moveto {max_x} {min_y} lineto {max_x} {max_y} lineto {min_x} {max_y} lineto closepath}} >>\n"
          # the “empty rectangle of Unicode disappointment”
            .format
              (
                min_x = font.min.x,
                max_x = font.max.x,
                min_y = font.min.y - font.baseline_y,
                max_y = font.max.y - font.baseline_y,
              )
      )
    for c in sorted(block_codes.keys()) :
        glyph = font.glyphs[encoding[block_codes[c]]]
        pr \
          (
            "        /{name} << /min_x {min_x} /max_x {max_x} /path {{newpath".format
              (
                name = code_name(c),
                min_x = glyph.min_x,
                max_x = glyph.max_x,
              )
          )
        for pathseg in glyph.path :
            firstpoint = True
            for point in pathseg :
                point -= Vector(0, font.baseline_y)
                pr(" {x} {y} {op}".format(x = point.x, y = point.y, op = ("lineto", "moveto")[firstpoint]))
                firstpoint = False
            #end for
        #end for
        pr("} >>\n")
    #end for
    pr("    >>\n")
    pr("    /FontBBox {}\n".format(gen_bbox_str(font)))
    pr("    /FontName /{}\n".format(name))
    pr("    /BuildGlyph\n")
    pr("      {\n")
    pr("        exch /CharStrings get\n") # get CharStrings from font dict
    pr("        exch get\n") # get glyph entry from CharStrings dict
    if do_font_caching :
        pr \
          (
            "        dup dup /max_x get exch /min_x get 2 copy sub" # wx
            " 0" # wy
            " 4 2 roll exch" # min_x max_x
            " {min_y} exch {max_y}" # wx wy min_x min_y max_x max_y
            " setcachedevice\n"
            .format
              (
                min_y = font.min.y - font.baseline_y,
                max_y = font.max.y - font.baseline_y,
              )
          )
    else :
        pr("        dup dup /max_x get exch /min_x get sub 0 setcharwidth\n")
    #end if
    pr("        {} setlinewidth\n".format(linewidth))
    pr("        /path get exec\n")
    pr("        stroke\n")
    pr("      } % BuildGlyph\n")
    pr(">>\n")
    pr("definefont pop\n")
#end gen_font

for fontname in args :
    font = hershey_font.HersheyGlyphs.load(fontname, align_left, use_encoding)
    if font.encoding != None :
        encoding = font.encoding
    else :
        encoding = dict((code, code) for code in font.glyphs)
    #end if
    basefontname = os.path.splitext(os.path.basename(fontname))[0] + suffix
    if max(encoding) > 255 :
        # assume 16-bit code will suffice
        child_fonts = []
        child_blocks = []
        child_font_name = "{}-empty".format(basefontname)
        gen_font(font, child_font_name, {}, encoding) # for handling empty blocks
        child_fonts.append(child_font_name)
        for block in range(256) :
            block_codes = {}
            for subcode in range(256) :
                code = block << 8 | subcode
                if code in encoding :
                    block_codes[subcode] = code
                #end if
            #end for
            if len(block_codes) != 0 :
                child_font_name = "{}-{:03d}".format(basefontname, block)
                gen_font(font, child_font_name, block_codes, encoding)
                child_blocks.append("{}".format(len(child_fonts)))
                child_fonts.append(child_font_name)
            else :
                child_blocks.append("0") # empty child font
            #end if
        #end for
        pr("/{}\n".format(basefontname))
        pr("<<\n")
        pr("    /FontType 0\n")
        pr("    /FontMatrix [1 0 0 1 0 0]\n")
        pr("    /FontBBox {}\n".format(gen_bbox_str(font)))
        pr("    /FMapType 2\n")
        pr("    /Encoding [{}]\n".format(" ".join(block for block in child_blocks)))
        pr \
          (
            "    /FDepVector [{}]\n".format
              (
                " ".join("/{} findfont".format(name) for name in child_fonts)
              )
          )
        pr(">>\n")
        pr("definefont pop\n")
    else :
        # only need 8-bit code
        gen_font(font, basefontname, dict((code, code) for code in range(256)), encoding)
    #end if
#end for
